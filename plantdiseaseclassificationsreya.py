# -*- coding: utf-8 -*-
"""PlantDiseaseClassificationSreya.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/113QFiKrZxJ7-0XHIvy-iqmqkS9jfbKYY

**Importing** **Libraries**
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

"""**Importing the Dataset From Drive**"""

train_dir='/content/drive/MyDrive/Infosys Project Team 3 PDC/Plant Disease Dataset/train'
test_dir='/content/drive/MyDrive/Infosys Project Team 3 PDC/Plant Disease Dataset/test'
validation_dir='/content/drive/MyDrive/Infosys Project Team 3 PDC/Plant Disease Dataset/validation'

"""**Preprocessing**"""

img_width, img_height = 256, 256
batch_size =256
num_classes = 38
epochs =3

train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

validation_datagen=ImageDataGenerator(rescale=1./255)

test_datagen=ImageDataGenerator(rescale=1./255)

train_generator=train_datagen.flow_from_directory(
    train_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical'
)

validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical'
)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical'
)

"""**Modelling**"""

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(img_width, img_height, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

"""**Training The Model**"""

history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // batch_size,
    callbacks=[early_stopping]
)

model.save('/content/drive/MyDrive/Infosys Project Team 3 PDC/Team3model.h5')

test_loss, test_accuracy = model.evaluate(test_generator, steps=test_generator.samples // batch_size)

print(f'Test accuracy: {test_accuracy:.2f}')

model.save('Team3.h5')

"""**Visualization**"""

plt.figure(figsize=(10, 5))
plt.plot(history.history['accuracy'], label='Train Accuracy', color='blue')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy', color='orange')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='upper left')
plt.show()

trained_model=tf.keras.models.load_model('Team3model.h5')

class_labels = list(train_generator.class_indices.keys())

"""**Testing**"""

image_path = '/content/drive/MyDrive/Infosys Project Team 3 PDC/Plant Disease Dataset/test/Corn-healthy/052169e1-a51d-4ff7-8b70-f07f3d2500c5___R.S_HL 0650 copy 2.jpg'
image = tf.keras.preprocessing.image.load_img(image_path, target_size=(img_width, img_height))
input_arr = tf.keras.preprocessing.image.img_to_array(image)
input_arr = np.array([input_arr])
input_arr = input_arr / 255.0

predictions = trained_model.predict(input_arr)
print(predictions)

result_index = np.argmax(predictions)
print(result_index)

model_prediction = class_labels[result_index]

plt.imshow(image)
plt.title(f"Disease Name: {model_prediction}")
plt.xticks([])
plt.yticks([])
plt.show()